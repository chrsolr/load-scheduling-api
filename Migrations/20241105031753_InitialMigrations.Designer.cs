// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LoadSchedulingAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241105031753_InitialMigrations")]
    partial class InitialMigrations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Config", b =>
                {
                    b.Property<Guid>("ConfigId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("config_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brand");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasDefaultValueSql("'iw_db_default_user@innowatts.com'::text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("market");

                    b.Property<string>("Org")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("org");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasDefaultValueSql("'iw_db_default_user@innowatts.com'::text");

                    b.HasKey("ConfigId")
                        .HasName("configs_pkey");

                    b.HasIndex(new[] { "Org", "Brand", "Market" }, "configs_org_brand_market_key")
                        .IsUnique();

                    b.ToTable("configs", (string)null);
                });

            modelBuilder.Entity("Credential", b =>
                {
                    b.Property<Guid>("CredentialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("credential_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brand");

                    b.Property<Guid>("ConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("config_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasDefaultValueSql("'iw_db_default_user@innowatts.com'::text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsSuma")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_suma");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_name");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("market");

                    b.Property<string>("Org")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("org");

                    b.Property<string>("Pfx")
                        .HasColumnType("text")
                        .HasColumnName("pfx");

                    b.Property<string>("PfxPassphrase")
                        .HasColumnType("text")
                        .HasColumnName("pfx_passphrase");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasDefaultValueSql("'iw_db_default_user@innowatts.com'::text");

                    b.Property<bool>("UseCertificate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("use_certificate");

                    b.Property<string>("UserAccount")
                        .HasColumnType("text")
                        .HasColumnName("user_account");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserPassword")
                        .HasColumnType("text")
                        .HasColumnName("user_password");

                    b.Property<string>("UserSubAccount")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("user_sub_account")
                        .HasDefaultValueSql("'DEFAULT'::text");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zone");

                    b.HasKey("CredentialId")
                        .HasName("credentials_pkey");

                    b.HasIndex("ConfigId");

                    b.HasIndex(new[] { "Org", "Brand", "Market", "Zone", "Location", "UserSubAccount" }, "credentials_org_brand_market_zone_location_user_sub_account_key")
                        .IsUnique();

                    b.ToTable("credentials", (string)null);
                });

            modelBuilder.Entity("LocationAttribute", b =>
                {
                    b.Property<Guid>("LocationAttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("location_attribute_id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brand");

                    b.Property<Guid>("ConfigId")
                        .HasColumnType("uuid")
                        .HasColumnName("config_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasDefaultValueSql("'iw_db_default_user@innowatts.com'::text");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("credential_id");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location_name");

                    b.Property<string>("Market")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("market");

                    b.Property<string>("Org")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("org");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasDefaultValueSql("'iw_db_default_user@innowatts.com'::text");

                    b.Property<string>("Utility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("utility");

                    b.Property<string>("Zone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("zone");

                    b.HasKey("LocationAttributeId")
                        .HasName("location_attribute_id");

                    b.HasIndex("CredentialId");

                    b.HasIndex(new[] { "ConfigId", "CredentialId", "Market", "Brand", "Zone", "Location", "Utility" }, "location_attributes_config_id_credential_id_market_brand_zo_key")
                        .IsUnique();

                    b.ToTable("location_attributes", (string)null);
                });

            modelBuilder.Entity("Credential", b =>
                {
                    b.HasOne("Config", "Config")
                        .WithMany("Credentials")
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("credentials_config_id_fkey");

                    b.Navigation("Config");
                });

            modelBuilder.Entity("LocationAttribute", b =>
                {
                    b.HasOne("Config", "Config")
                        .WithMany("LocationAttributes")
                        .HasForeignKey("ConfigId")
                        .IsRequired()
                        .HasConstraintName("location_attributes_config_id_fkey");

                    b.HasOne("Credential", "Credential")
                        .WithMany("LocationAttributes")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("location_attributes_credential_id_fkey");

                    b.Navigation("Config");

                    b.Navigation("Credential");
                });

            modelBuilder.Entity("Config", b =>
                {
                    b.Navigation("Credentials");

                    b.Navigation("LocationAttributes");
                });

            modelBuilder.Entity("Credential", b =>
                {
                    b.Navigation("LocationAttributes");
                });
#pragma warning restore 612, 618
        }
    }
}
